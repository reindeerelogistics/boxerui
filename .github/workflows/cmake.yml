name: Setup

on:
#   create:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]
  push:
    branches: [task/* ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE_RELEASE: Release
  BUILD_TYPE_DEBUG: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Step 1 - Checkout branch
      uses: actions/checkout@v2
      with:
        submodules: true
    
    - name: Step 2 - Get CMake
      uses: lukka/get-cmake@v3.21.1
      
    - name: Step 3 - Cache OpenCV
      id: opencv-cache
      uses: actions/cache@v2.1.6
      env:
        cache-name: cache-opencv
      with:
        path: ./opencv-master
        key: ${{ runner.os }}-opencv-cache
        restore-keys: |
                      ${{ runner.os }}-opencv
                      ${{ runner.os }}-
            
    - name: Step 3.5 - Load Cached OpenCV
      if:  steps.opencv-cache.outputs.cache-hit != 'true'
      uses: rayandrews/with-opencv-action@v1
      with:
        dir: ./opencv-master
        cached:  ${{ steps.opencv-cache.outputs.cache-hit }} 
        opencv-version: master
        opencv-extra-modules: OFF
        CMAKE_BUILD_TYPE: ${{env.BUILD_TYPE_RELEASE}}
        BUILD_NEW_PYTHON_SUPPORT: OFF
        WITH_V4L: ON
        WITH_OPENGL: ON
    
    - name: Step 4 - Setup Glfw
      run: |
            pwd
            ls -al
            git clone https://github.com/glfw/glfw.git
            
#     - name: Step 5 - run-cmake and build BoxerUI
#       uses: lukka/run-cmake@v3.4
#       with:
#           cmakeListsOrSettingsJson: CMakeListsTxtAdvanced

    - name: Step 5 - Configure BoxerUI
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
            ls -al
            cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE_RELEASE}}

    - name: Step 6 - Build BoxerUI
      # Build your program with the given configuration
      run: |
            ls -al
            cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE_RELEASE}} 

    - name: Locate artifact
      run: |
            ls build
            cd build/BoxerUI/src; ls -al

    - name: Download a Build Artifact
      uses: actions/download-artifact@v2.0.10
      with:
        # Artifact name
        name: BoxerUI_app
        # Destination path
        path: ${{github.workspace}}/build/BoxerUI/src
        

#     - name: Build
#       # Build your program with the given configuration
#       run: |
#             pwd
#             cmake --build ../build/ --config ${{env.BUILD_TYPE_RELEASE}}

#     - name: Test
#       working-directory: 
#       # Execute tests defined by the CMake configuration.  
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest -C ${{env.BUILD_TYPE}}
      
