name: Setup

on:
#   create:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]
  push:
    branches: [task/* ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
#   BUILD_TYPE_DEBUG: Debug

jobs:
  Windows-Build:
    runs-on: windows-latest
    
    steps:
#     - name: Step 1 - Checkout branch
#       uses: actions/checkout@v2
#       with:
#         submodules: true
        
#     - name: Step 2 - Get CMake
#       uses: lukka/get-cmake@v3.21.1
      
    - name: Step 1 - Get it together!!
      run: |
            get-date
            Write-Output ${{runner.os}} impl is still WIP
      shell: powershell
      
  Windows-Test:
    runs-on: windows-latest
    needs: [Windows-Build]
    
    steps:
    - name: Step 1 - Test BoxerUI_app
      run: |
            Write-Output ${{runner.os}} artifact will be built upon successful test
  
#     - name: Download a Build Artifact
#       uses: actions/upload-artifact@v2.2.4
#       with:
#         # Artifact name
#         name: BoxerUI_app
#         # Destination path
#         path: |
#               ${{github.workspace}}/BoxerUI/bin/${{env.BUILD_TYPE}}
#         error: BoxerUI_app not found in "${{github.workspace}}/BoxerUI/bin/${{env.BUILD_TYPE}}"
#         retention-days: 20
        
        
  Linux-Build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Step 1 - Checkout branch
      uses: actions/checkout@v2
      with:
        submodules: true
    
    - name: Step 2 - Get CMake
      uses: lukka/get-cmake@v3.21.1
      
    - name: Step 3 - Cache OpenCV
      id: opencv-cache
      uses: actions/cache@v2.1.6
      env:
        cache-name: cache-opencv
      with:
        path: opencv-master
        key: ${{ runner.os }}-opencv-cache
        restore-keys: |
                      ${{ runner.os }}-opencv
                      ${{ runner.os }}-
            
    - name: Step 3.5 - Load Cached OpenCV
      if:  steps.opencv-cache.outputs.cache-hit != 'true'
      uses: rayandrews/with-opencv-action@v1
      with:
        dir: opencv-master
        cached:  ${{ steps.opencv-cache.outputs.cache-hit }} 
        opencv-version: master
        opencv-extra-modules: OFF
        CMAKE_BUILD_TYPE: ${{env.BUILD_TYPE_RELEASE}}
        BUILD_NEW_PYTHON_SUPPORT: OFF
        WITH_V4L: ON
        WITH_OPENGL: ON
    
    - name: Step 4 - Setup Glfw
      run: |
            pwd
            ls -al
            git clone https://github.com/glfw/glfw.git
            
#     - name: Step 5 - run-cmake and build BoxerUI
#       uses: lukka/run-cmake@v3.4
#       with:
#           cmakeListsOrSettingsJson: CMakeListsTxtAdvanced

    - name: Step 5 - Configure BoxerUI
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
            ls -al
            cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Step 6 - Build BoxerUI
      # Build your program with the given configuration
      run: |
            ls -al
            cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} 
            
#     - name: Locate artifact
#       run: |
#             ls build
#             cd build/BoxerUI/src; ls -al
    
  Linux-Test:
    runs-on: ubuntu-latest
    needs: Linux-Build
    
    outputs:
      test-output:  ${{ steps.step1.outputs.test }}
    steps: 
    - name: Test
      working-directory: ${{github.workspace}}/build/BoxerUI/tests
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      #ctest -C BoxerUI/tests ${{env.BUILD_TYPE}}
      run: |
            cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target BoxerUI_Tests -j 4 --
            echo The folowing tests will be executed:
            ctest --show-only human
            echo Running BoxerUI_Tests...
            ctest -j4 -C ${{env.BUILD_TYPE}} -T test --output-on-failure -T test --output-on-failure
    - id: test-result
      run: echo "::set-output name=test::pass"
    
    - name: Download a Build Artifact
      if: ${{needs.Linux-Build.outputs.test-output}} == 'pass'
      uses: actions/upload-artifact@v2.2.4
      with:
        # Artifact name
        name: BoxerUI_app
        # Destination path
        path: |
              ${{github.workspace}}/BoxerUI/bin/${{env.BUILD_TYPE}}
        error: BoxerUI_app not found in "${{github.workspace}}/BoxerUI/bin/${{env.BUILD_TYPE}}"
        retention-days: 20  
        
        
  Discord-CI:
    runs-on: ubuntu-latest
    if: always()
    needs: [Windows-Test, Linux-Test]
    steps:
    - uses: sarisia/actions-status-discord@v1
      if: success()
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
#         nodetail: true
        title: "`BoxerUI_app` build was successful"
        description: |
                      Version `1.2.3-alpha`
                      Click [here](https://github.com/reindeererobotics/BoxerUI/actions) to download!
        color: 0xff91a4
#         username: GitHub Actions
        image: ${{ secrets.EMBED_IMAGE }}
        avatar_url: ${{ secrets.AVATAR_URL }}
